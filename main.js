let web3;
let contract;
let userAccount;

window.addEventListener("load", async () => {
  if (window.bitkeep && window.bitkeep.ethereum) {
    window.ethereum = window.bitkeep.ethereum;
  }

  if (typeof window.ethereum === "undefined") {
    alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MetaMask ‡∏´‡∏£‡∏∑‡∏≠ Bitget Wallet");
    return;
  }

  web3 = new Web3(window.ethereum);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö chain
  const chainId = await ethereum.request({ method: 'eth_chainId' });
  if (chainId !== '0x38') {
    try {
      await ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: '0x38' }],
      });
    } catch (err) {
      alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ BNB Smart Chain (ChainID: 56)");
      return;
    }
  }
});

async function connectWallet() {
  try {
    const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
    userAccount = accounts[0];

    contract = new web3.eth.Contract(contractABI, contractAddress);

    document.getElementById("connectButton").innerText = "üü¢ Connected: " + userAccount.slice(0, 6) + "..." + userAccount.slice(-4);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Referrer
    const urlParams = new URLSearchParams(window.location.search);
    const ref = urlParams.get("ref");
    if (ref) {
      document.getElementById("referrerDisplay").innerText = `üì´ Referrer: ${ref}`;
    } else {
      document.getElementById("referrerDisplay").innerText = "üì´ Referrer: ‡πÑ‡∏°‡πà‡∏°‡∏µ";
    }
  } catch (err) {
    console.error(err);
    alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wallet ‡πÑ‡∏î‡πâ");
  }
}

function copyReferralLink() {
  if (!userAccount) {
    alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wallet ‡∏Å‡πà‡∏≠‡∏ô");
    return;
  }

  const link = `${window.location.origin}${window.location.pathname}?ref=${userAccount}`;
  navigator.clipboard.writeText(link)
    .then(() => alert("üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡πâ‡∏ß"))
    .catch(() => alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏î‡πâ"));
}

async function registerReferrer() {
  const urlParams = new URLSearchParams(window.location.search);
  const ref = urlParams.get("ref");

  if (!ref || ref.toLowerCase() === userAccount.toLowerCase()) {
    alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Referrer ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ");
    return;
  }

  try {
    await contract.methods.registerReferrer(ref).send({ from: userAccount });
    alert("‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Referrer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");
  } catch (err) {
    console.error(err);
    alert("‚ùå ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  }
}

async function recordPurchase() {
  const amount = prompt("üí∞ ‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô 10 = 10 USDT)");

  if (!amount || isNaN(amount)) {
    alert("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return;
  }

  try {
    const amountWei = web3.utils.toWei(amount, 'ether');
    await contract.methods.recordPurchase(userAccount, amountWei).send({ from: userAccount });
    alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
  } catch (err) {
    console.error(err);
    alert("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  }
}
